import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

//import javax.swing.*;
import javax.swing.*;
import java.awt.*;
import java.io.InputStream;
import java.io.PrintStream;

import java.lang.reflect.InvocationTargetException;
import java.util.List;

public class TextGUI {
    private JPanel mainPanel;
    private ButtonPanel buttonPanel;
    private ConsolePanel consolePanel;
    private JPanel consolePanelRootPanel;
    private JPanel buttonPanelRootPanel;
    public final PrintStream out;
    public final InputStream in;
    private StringBuffer input;

    private CellConstraints defaultButtonPanelConstraints;
    private JFrame mainFrame;


    public TextGUI(String title) {
        mainFrame = new JFrame(title);
        input = new StringBuffer();
        consolePanel = new ConsolePanel(input);
        buttonPanel = new ButtonPanel(input);
        $$$setupUI$$$();
        out = consolePanel.out;
        in = consolePanel.in;
        defaultButtonPanelConstraints = ((FormLayout) mainPanel.getLayout()).getConstraints(buttonPanelRootPanel);
        this.hideButtonPanel();
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                createAndShowGUI();
            }
        });
    }

    public TextGUI() {
        this("TextGUI");
    }

    private void createAndShowGUI() {
        mainFrame.setContentPane(mainPanel);
        mainFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        mainFrame.pack();
        mainFrame.setVisible(true);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("fill:d:noGrow,left:4dlu:noGrow,fill:max(d;4px):noGrow", "center:259px:grow(1.1)"));
        mainPanel.setPreferredSize(new Dimension(800, 600));
        buttonPanelRootPanel.setEnabled(false);
        buttonPanelRootPanel.setPreferredSize(new Dimension(200, 600));
        CellConstraints cc = new CellConstraints();
        mainPanel.add(buttonPanelRootPanel, new CellConstraints(1, 1, 1, 1, CellConstraints.DEFAULT, CellConstraints.DEFAULT, new Insets(10, 10, 10, 10)));
        consolePanelRootPanel.setPreferredSize(new Dimension(800, 600));
        mainPanel.add(consolePanelRootPanel, cc.xy(3, 1));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        consolePanelRootPanel = consolePanel.getRootPanel();
        buttonPanelRootPanel = buttonPanel.getRootPanel();
    }

    public void clear() {
        consolePanel.clear();
    }

    public void hideButtonPanel() {
        if (buttonPanelRootPanel.getParent() == mainPanel) {
            defaultButtonPanelConstraints = ((FormLayout) mainPanel.getLayout()).getConstraints(buttonPanelRootPanel);
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    public void run() {
                        mainPanel.remove(buttonPanelRootPanel);
                        mainPanel.revalidate();
                        mainPanel.repaint();
                    }
                });
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            }
        }
    }

    public void showButtonPanel() {
        if (!(buttonPanelRootPanel.getParent() == mainPanel))
            try {
                SwingUtilities.invokeAndWait(new Runnable() {
                    public void run() {
                        mainPanel.add(buttonPanelRootPanel, defaultButtonPanelConstraints, 0);
                        mainPanel.revalidate();
                        mainPanel.repaint();
                    }
                });
            } catch (InterruptedException e) {
                throw new RuntimeException(e);
            } catch (InvocationTargetException e) {
                throw new RuntimeException(e);
            }

    }

    public List<AbstractButton> getButtons() {
        return buttonPanel.getButtons();
    }
}
