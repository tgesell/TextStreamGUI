import com.jgoodies.forms.layout.*;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.lang.reflect.InvocationTargetException;

/**
 * ConsolePanel is one of two main components in TextGUI.  It consists of an outputTextArea and
 * an inputField.
 * <p>
 * ConsolePanel also defines an InputStream and a PrintStream.  These are public final, and are utilized as
 * the main TextStreamGUI InputStream and PrintStream.
 * <p>
 * Text written into the PrintStream appears in the outputTextArea.  Text typed into the inputField, gets stored
 * when Return is typed, and can then be read back out using the InputStream.
 */
public class ConsolePanel {
    private JPanel mainPanel;
    private JTextPane outputTextArea;
    private JTextField inputField;
    private JScrollPane outputScrollPane;
    private int inputPointer;

    public final PrintStream out;
    public final InputStream in;

    /**
     * @param input - the StringBuffer from the main TextStreamGUI that the InputStream reads out of.
     *              ConsolePanel will append information into this StringBuffer to make it available
     *              to the InputStream
     */
    public ConsolePanel(StringBuffer input) {
        out = new PrintStream(new OutputStream() {
            @Override
            public void write(int b) {
                char c = (char) b;
                String value = Character.toString(c);
                try {
                    SwingUtilities.invokeAndWait(new Runnable() {
                        public void run() {
                            StyledDocument doc = outputTextArea.getStyledDocument();
                            try {
                                doc.insertString(doc.getLength(), value, null);
                            } catch (BadLocationException e) {
                                throw new RuntimeException(e);
                            }
                        }
                    });
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                } catch (InvocationTargetException e) {
                    throw new RuntimeException(e);
                }

            }
        });
        inputPointer = 0;
        in = new InputStream() {

            @Override
            public int read() {
                boolean dataToRead = false;
                if (inputPointer > 0 && input.charAt(inputPointer - 1) == '\n') {
                    input.delete(0, inputPointer);
                    inputPointer = 0;
                    return -1;
                }

                while (!dataToRead) {
                    if (input.length() > inputPointer)// && input[input.length - 1] != 0)
                        dataToRead = true;
                    try {
                        Thread.sleep(10);
                    } catch (InterruptedException e) {
                        throw new RuntimeException(e);
                    }
                }
                return input.charAt(inputPointer++);
            }
        };
        inputField.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    char[] characters = inputField.getText().toCharArray();
                    for (char c : characters) {
                        input.append(c);
                    }
                    input.append(e.getKeyChar());
                    inputField.setText("");
                }
                super.keyReleased(e);
            }
        });
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("fill:d:grow", "center:522px:noGrow,top:44dlu:noGrow"));
        mainPanel.setPreferredSize(new Dimension(800, 600));
        outputScrollPane = new JScrollPane();
        outputScrollPane.setPreferredSize(new Dimension(800, 500));
        CellConstraints cc = new CellConstraints();
        mainPanel.add(outputScrollPane, cc.xy(1, 1, CellConstraints.FILL, CellConstraints.FILL));
        outputScrollPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLineBorder(Color.black), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        outputTextArea = new JTextPane();
        outputTextArea.setEditable(false);
        outputTextArea.setPreferredSize(new Dimension(600, 500));
        outputScrollPane.setViewportView(outputTextArea);
        inputField = new JTextField();
        inputField.setPreferredSize(new Dimension(600, 100));
        mainPanel.add(inputField, cc.xy(1, 2, CellConstraints.FILL, CellConstraints.DEFAULT));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    /**
     * clears the outputTextArea
     */
    public void clear() {
        outputTextArea.setText("");
    }

    public JPanel getRootPanel() {
        return mainPanel;
    }
}